def clock_project = new org.gradle.util.Clock()
def timing_listener = new TimingsListener(clock_project)
gradle.addListener timing_listener

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private Clock clock_task
    private Clock clock_project
    private timings = []
    public result_str

    public TimingsListener(Clock clockProject) {
        this.clock_project = clockProject
    }

    @Override
    void beforeExecute(Task task) {
        clock_task = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock_task.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void buildFinished(BuildResult result) {
        def ms = clock_project.timeInMs
        printf "Total time: %7s\n", ms
        def sb = StringBuilder.newInstance()
        sb << sprintf("%7s, total time\n", ms)

        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
            sb << sprintf("%7s, %s\n", timing)
        }
        result_str = sb.toString()
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.buildFinished {
    def previous_file = new File('build.times')
    previous_file.renameTo("build.times.old")
    previous_file = new File("build.times.old")
    def current_file = new File("build.times")
    current_file << timing_listener.result_str
    def working_dir = new File(".").absolutePath
    def metrics_path = new File("../python-flask/metrics_sender.py").absolutePath
    println(metrics_path)
    exec {
        workingDir '.'
        commandLine "python.exe", metrics_path,
                "--root-dir", working_dir,
                "--current", current_file.absolutePath,
                "--previous", previous_file.absolutePath
    }
    println "DONE!"
}